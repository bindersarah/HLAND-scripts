# For Em

```{r}
library(readxl)
library(writexl)
library(tidyverse)
library(dplyr) # for filter etc
library(magrittr)

```


### Create dataset

Create a dataset which includes every year of cognitive composite data for only the select participants that have a specific identifier.

 Import Data

```{r}
master_data <- read_csv("/Users/ella2/Desktop/R files/data for collaborators/Amyloid_master_data_cleaned (2).csv")
subjects <- read_excel("/Volumes/shr1/Other Projects/working_files_SHB/Data Pulls for 7T team/7T_identifiers.xlsx")
#View(subjects)

#using composite_scores.csv instad of the alltracers/amyloid master data
#composites <- read.csv("/Volumes/shr1/RedCap_data/Composite_scores.csv")
```

Subset 

The master data includes over 500 columns, so I will need to find the variables of interest and subset the dataset.

```{r}
# identify index
which(names(master_data) == "composite_score_ef") #440 
which(names(master_data) == "composite_score_em") # 441
which(names(master_data) == "mmse_tot_z") # 444

# subset
master <- master_data[ , c(2,3,440:444)]
View(master)
```

Join, QC, and Export Dataset

```{r}
# join
data <- left_join(subjects, master, by = "sub_num")

# QC
# each row should be a unique subject

# count rows
nrow(subjects) #21 

# count unique subjects
data %>% distinct(sub_num) %>% 
  summarise(Count = n()) # 21

# export
write_xlsx(data, "/path/Emily_cog_data.xlsx")
```

### Match on dates

**Import dates dataset**

Import dataset that includes cognitive testing dates for each session

```{r}
np_dates <- read_excel("/Volumes/shr1/Other Projects/working_files_SHB/AANDS Key Data/aands_np_dates.xlsx")

```

Join & check data types

```{r}
# join
all_dates <- left_join(data, np_dates, by = "sub_num")

# rename column because the 7 in "7T_scan_date" is causing problems
colnames(all_dates)[3] <- "T_scan_date"

# check col types
summary(all_dates)
class(all_dates$year_0_np)
class(all_dates$T_scan_date)

# mutate to date
all_dates <- all_dates %>% 
  mutate(T_scan_date = as.Date(T_scan_date), year_0_np = as.Date(year_0_np),
         year_1_np = as.Date(year_1_np), year_2_np = as.Date(year_2_np), year_3_np = as.Date(year_3_np))

class(all_dates$year_0_np)
class(all_dates$T_scan_date) # Date
```


Create sub-dataset of just the identifer and dates for selected session
```{r}
ses_01 <- np_dates[ , c(1:3)]
ses_02 <- np_dates[ , c(1,2,4)]
ses_03 <- np_dates[ , c(1,2,5)]
ses_x <- np_dates[ , c(1,2,6)]
```

### Intervals

```{r}
# intervals
ses01$interval <- difftime(ses01$`7T_scan_date`, ses01$year_0_np)
View(ses01)
ses02$interval <- difftime(ses02$`7T_scan_date`, ses02$year_1_np)
View(ses02)
ses03$interval <- difftime(ses03$`7T_scan_date`, ses03$year_2_np)
View(ses03)
sesx$interval <- difftime(sesx$`7T_scan_date`, sesx$year_3_np)
View(sesx)
```

Filter by "year" aka NP session

```{r}
cog_data <- read_excel("/Volumes/shr1/Other Projects/working_files_SHB/Data Pulls for 7T team/for Emily/Emily_cog_data.xlsx")

cog_ses01 <- cog_data %>% 
  filter(year == "ses-01")

cog_ses02 <- cog_data %>% 
  filter(year == "ses-02")

cog_ses03 <- cog_data %>% 
  filter(year == "ses-03")

cog_sesx <- cog_data %>% 
  filter(year == "ses-x")

```

Create datasets per session that include identifier, date, and the testing for selected year
```{r}
# filtered to session
ses01 <- left_join(cog_ses01, ses_01, by = "sub_num")
ses02 <- left_join(cog_ses02, ses_02, by = "sub_num")
ses03 <- left_join(cog_ses03, ses_03, by = "sub_num")
sesx <- left_join(cog_sesx, ses_x, by = "sub_num")

View(ses01)
```

Standardize & Merge (rbind)

```{r}
# rename cols to standardize
colnames(ses01)[10] <- "np_date"
colnames(ses02)[10] <- "np_date"
colnames(ses03)[10] <- "np_date"
colnames(sesx)[10] <- "np_date"

all_sessions <- rbind(ses01,ses02,ses03,sesx)
#View(all_sessions)

write_xlsx(all_sessions, "/Volumes/shr1/Other Projects/working_files_SHB/Data Pulls for 7T team/for Emily/all_sessions.xlsx")
```

### Filter 
Filter to the testing sessions with the smallest interval between dates
```{r}
final_sessions <- all_sessions %>% 
  group_by(sub_num) %>% 
  filter(abs(interval) == min(abs(interval)))
```

### QC

```{r}
# how many subjects in original data
all_sessions %>% distinct(sub_num) %>% 
  summarise(Count = n()) # 21
# how many subjects in output data
nrow(final_sessions) #21

# arrange
final_sessions <- final_sessions[ , c(1:4,10,11,5:9)]

#rename cols for clarity
colnames(final_sessions)[4] <- "np_session"
```


```{r}
# export final sessions
write_xlsx(final_sessions, "/Volumes/shr1/Other Projects/working_files_SHB/Data Pulls for 7T team/for Emily/final_np_sessions.xlsx")
```
